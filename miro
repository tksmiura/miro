#!/usr/bin/env perl
# MIT License
# Copyright (c) 2019 TAKESHI MIURA
# https://github.com/tksmiura/miro
use utf8;
use feature 'unicode_strings';
use Encode;
use Text::VisualWidth::PP;
use Getopt::Long;
use File::Temp 'tempfile';
use Data::Dumper;
use Term::ReadKey;



$use_TextVisualWidthPP = 1;
$Text::VisualWidth::PP::EastAsian = 1;     # East asian ambigious width

binmode STDIN,  ":utf8";
binmode STDOUT, ":utf8";

$TAB_WITDH        = 8;

$COLOR_BG_BLACK   = "\x1b[40m";
$COLOR_BG_RED     = "\x1b[41m";
$COLOR_BG_GREEN   = "\x1b[42m";
$COLOR_BG_YELLOW  = "\x1b[43m";
$COLOR_BG_BLUE    = "\x1b[44m";
$COLOR_BG_MAGENTA = "\x1b[45m";
$COLOR_BG_CYAN    = "\x1b[46m";
$COLOR_BG_WHITE   = "\x1b[47m";

$COLOR_FG_BLACK   = "\x1b[30m";
$COLOR_FG_RED     = "\x1b[31m";
$COLOR_FG_GREEN   = "\x1b[32m";
$COLOR_FG_YELLOW  = "\x1b[33m";
$COLOR_FG_BLUE    = "\x1b[34m";
$COLOR_FG_MAGENTA = "\x1b[35m";
$COLOR_FG_CYAN    = "\x1b[36m";
$COLOR_FG_WHITE   = "\x1b[37m";

$COLOR_BG_LBLACK  = "\x1b[100m";
$COLOR_BG_LRED    = "\x1b[101m";
$COLOR_BG_LGREEN  = "\x1b[102m";
$COLOR_BG_LYELLOW = "\x1b[103m";
$COLOR_BG_LBLUE   = "\x1b[104m";
$COLOR_BG_LMAGENTA= "\x1b[105m";
$COLOR_BG_LCYAN   = "\x1b[106m";
$COLOR_BG_LWHITE  = "\x1b[107m";

$COLOR_FG_LBLACK  = "\x1b[90m";
$COLOR_FG_LRED    = "\x1b[91m";
$COLOR_FG_LGREEN  = "\x1b[92m";
$COLOR_FG_LYELLOW = "\x1b[93m";
$COLOR_FG_LBLUE   = "\x1b[94m";
$COLOR_FG_LMAGENTA= "\x1b[95m";
$COLOR_FG_LCYAN   = "\x1b[96m";
$COLOR_FG_LWHITE  = "\x1b[97m";

$COLOR_REVERSE    = "\x1b[7m";
$COLOR_UNDERLINE  = "\x1b[4m";
$COLOR_BOLD       = "\x1b[1m";
$COLOR_RESET      = "\x1b[0m";

# terminal size
$TERM_WIDTH       = `tput cols`;
$TERM_HEIGHT      = `tput lines`;

#options
# -l -less : to use '|less -R'
GetOptions('less' => \$opt_less, 'present' => \$opt_p, 'debug' => \$opt_debug, 'iterm2' => \$opt_iterm2, 'sixel' => \$opt_sixel);

# test tty
if (!$opt_less && ! -t STDOUT) {
    print "not terminal\n";
    exit 1;
}

if ($opt_p) {
    ReadMode 4;         # Key Input mode
    print "\x1b[2J";    # Clear all screen
    print "\x1b[1;1H";  # move left top
}

foreach $infile (@ARGV) {
    open FILE, '<:encoding(UTF-8)', $infile || die "Can't open to $infile";
    my @lines = <FILE>;
    my @dest;
    my $i;

    for ($i = 0; $i <= $#lines; $i++) {
        $lines[$i] =~ s/\n$//;
    }

    if (! $opt_p) {
        $Buffer = "";
        @dest = &parse_markdown($TERM_WIDTH - 4, 4, \@lines);
        foreach $l (@dest) {
            print "$l\n";
        }
    } else {  # presentation mode
        my $p = &parse_page(\@lines);
        my @pages = @$p;

        for (my $i = 0; $i <= $#pages; $i++) {
            my $p =  $pages[$i];
            my @lines = @$p;
            foreach my $l (@lines) {
                print "$l\n";
            }
            my $key = &wait_key();
            if ($key eq "q") {
                last;
            } elsif ($key eq "p" ||
                     $key eq "Left") {
                if ($i > 0) {
                    $i -= 2;
                }
            }
            print "\x1b[2J";    # Clear all screen
            print "\x1b[1;1H";  # move left top
        }
    }

}

if ($opt_p) {
    ReadMode 0;
}

exit 0;

sub wait_key {
    my $key = ReadKey(0);
    if (ord($key) == 27) {
        my $next = ord(ReadKey(-1));
        if ($next == 91) {
            my $arrow = ord(ReadKey(-1));
            if ($arrow == 68) {
                return "Left";
            } elsif ($arrow = 67) {
                return "Right";
            } elsif ($arrow = 67) {
                return "Up";
            } elsif ($arrow = 67) {
                return "Down";
            }
        }
        return "";  # unknow control key"
    }
    return $key;
}


sub parse_page {
    my ($lines) = @_;
    my @line = @$lines;
    my @pages = ();
    my @context = ();

    for (my $i = 0; $i <= $#line; $i++) {
        if ($line[$i] =~ /^ {0,3}(#+)\s+([^\s].*)$/) {         # Header  #+
            if (@content) {
                 my @c = &parse_markdown($TERM_WIDTH - 4, 4, \@content);
                 push @pages, \@c;
                 @content = ();
            }
            push @content, $line[$i];
        } elsif ($line[$i+1] =~/^\s*\=+\s*$/) {                # Header ==
            if (@content) {
                my @c = &parse_markdown($TERM_WIDTH - 4, 4, \@content);
                push @pages, \@c;
                @content = ();
            }
            push @content, $line[$i];
            $i++;
            push @content, $line[$i];
        } elsif ($line[$i+1] =~/^\s*-+\s*$/) {                 # Header --
            if (@content) {
                my @c = &parse_markdown($TERM_WIDTH - 4, 4, \@content);
                push @pages, \@c;
                @content = ();
            }
            push @content, $line[$i];
            $i++;
            push @content, $line[$i];
        } else {                                               # content
            push @content, $line[$i];
        }
    }
    if (@content) {
        my @c = &parse_markdown($TERM_WIDTH - 4, 4, \@content);
        push @pages, \@c;
        @content = ();
    }
#    print Dumper(@pages);

    return \@pages;
}

sub parse_markdown {
    my ($width, $pad, $lines) = @_;
    my @line = @$lines;
    my @dest, @sub_line;
    my $buffer = "";
    my $i;
    my $f_cont = 0;
    my $pad_s = " " x $pad;

    @dest = ();
    for ($i = 0; $i <= $#line; $i++) {
        my $l = $line[$i];
        my $text;

        if (!$f_cont && ($l =~ /^    / || $l =~ /^\t/)) {    # code (indent)
            my $code_indent = 10000;
            my $cnt_brank = 0;
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            @sub_line = ();
            while ($i <= $#line &&
                   ($l =~ /^    / || $l =~ /^\t/ || $l =~ /^\s*$/)) {
                if ($l !~ /^\s*$/) {
                    $text = &change_tab($l);
                    $text =~ /^( +)/;
                    if ($code_indent > length($1)) {
                        $code_indent = length($1);
                    }
                    while ($cnt_brank > 0) {
                        push @sub_line, "";
                        $cnt_brank--;
                    }
                    push @sub_line, $text;
                } else {
                    $cnt_brank++;
                }
                $l = $line[++$i];
            }
            $i--;
            push @dest, &add_pad($pad, &output_code(\@sub_line,
                                                    $code_indent, $width));
            while ($cnt_brank > 0) {
                push @dest, "";
                $cnt_brank--;
            }
        } elsif ($l !~ /^\s*````*[^`]+`/ && $l =~ /^(\s*)(````*)(.*)/) { # code `
            my $space_len = length(&change_tab($1));
            my $quote_len = length($2);
            my $lang = $3;
            $opt_debug && print STDERR "code block $lang\n";
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            @sub_line = ();
            while (++$i <= $#line && ($line[$i] !~ /^\s*(````*)\s*$/ ||
                                       length($1) < $quote_len)) {
                $text = &change_tab($line[$i]);
                $text =~ s/^(\s*)//;
                my $add_space = length($1) - $space_len;
                if ($add_space > 0) {
                    $text = " " x $add_space . $text;
                }
                push @sub_line, $text;
            }
            push @dest, &add_pad($pad, &output_code(\@sub_line, 0, $width, $lang));
        } elsif ($l !~ /^\s*~~~~*[^~]+~/ && $l =~ /^(\s*)(~~~~*)/) { # code ~
            my $space_len = length(&change_tab($1));
            my $quote_len = length($2);
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            @sub_line = ();
            while (++$i <= $#line && ($line[$i] !~ /^\s*(~~~~*)\s*$/ ||
                                       length($1) < $quote_len)) {
                $text = &change_tab($line[$i]);
                $text =~ s/^(\s*)//;
                my $add_space = length($1) - $space_len;
                if ($add_space > 0) {
                    $text = " " x $add_space . $text;
                }
                push @sub_line, $text;
            }
            push @dest, &add_pad($pad, &output_code(\@sub_line, 0, $width));
        } elsif ($l =~ /^\s*>(.*$)/) {              # quote
            my $t = $1;
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            @sub_line = ();
            while ($i <= $#line) {
                push @sub_line, $t;
                $l = $line[++$i];
                if ($l !~ /^\s*>(.*$)/) {
                    last;
                }
                $t = $1;
            }
            $i--;
            @sub_line = &parse_markdown($width - 3, 0, \@sub_line);
            foreach $l (@sub_line) {
                my $color = &get_bgrey(12);
                push @dest, "$pad_s$color $COLOR_RESET  $l";
            }

        } elsif ($l =~ /^(\s*)([\*\-\+]\s*\[.\]|[\*\-\+]|[0-9]+\.)\s(.*)$/) {   # list
            my $mark = $2;
            my $text = $3;
            #my $indent = length($1) + length($2) + 1;
            my $indent = length($1) + 1;
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            @sub_line = ();
            push @sub_line, $text;
            $f_cont = 1;
            while (++$i <= $#line) {
                $l = $line[$i];
                if ($l =~ /^\s*$/) {
                    push @sub_line, "";
                    $f_cont = 0;
                    next;
                } elsif ($l =~ /^(\s*)([\*\-\+]|[0-9]+\.)\s/ ||
                         ($l !~ /^\s*````*[^`]+`/ && $l =~ /^(\s*)(````*)/) ||
                         ($l !~ /^\s*~~~~*[^~]+~/ && $l =~ /^(\s*)(~~~~*)/) ||
                         ($l =~ /^(\s*)>/) ||
                         ($l =~ /^(\s*)(#+)\s+([^\s].*)$/)) {
                    if (length($1) <= $indent) {
                        last;
                    }
                } elsif(!$f_cont &&
                        ($l !~ /^(\s+)/ || length($1) <= $indent)) {
                    last;
                } elsif($f_cont &&
                        ($l !~ /^(\s+)/ || length($1) <= $indent)) {
                    $l =~ s/^\s*//;
                    push @sub_line, $l;
                    next;
                }
                $f_cont = 1;
                push @sub_line, substr($l, $indent);
            }
            $i--;

            my $space = "";
            $mark =~ /^([^\s]*)/;
            $indent = length($1) + 1;
            if ($indent < 4) {
                $space = " " x (4 - $indent);
                $indent = 4;
            }
            if (length($mark) + 1 + length($space) > $indent) {
                $indent = length($mark) + 1 + length($space);
            }
            @sub_line = &parse_markdown($width - $indent, 0, \@sub_line);
            $l = shift(@sub_line);
            push @dest, "$pad_s$space$COLOR_FG_LCYAN$mark$COLOR_RESET $l";
            $space = " " x $indent;
            foreach $l (@sub_line) {
                push @dest, "$pad_s$space$l";
            }
        } elsif ($l =~ /^\s*---/ && $l !~ /\|/) {     # bar
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            my $bar = " " x ($width + $pad);
            my $color = &get_grey(8);
            push @dest, "$COLOR_UNDERLINE$color$bar$COLOR_RESET\n";
        } elsif ($l =~ /\|/) {                                 # table
            my @table, @l, @witdh, @lr;
            my $c = 0, $max_column = 0;
            my $head = -1;

            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            do {
                $l =~ s/^\s*//;
                $l =~ s/^\|\s*//;
                $l =~ s/\s*$//;
                $l =~ s/\s*\|$//;
                if ($head < 0 && $l =~ /---/) {
                    $head = $c - 1;
                    my @bar = split(/\s*\|\s*/, $l);
                    my $j;
                    for ($j = 0; $j <= $#bar; $j ++) {
                        if ($bar[$j] =~ /^\:.*\:$/) {
                            $lr[$j] = 0;
                        } elsif ($bar[$j] =~ /\:$/) {
                            $lr[$j] = 1;
                        } else {
                            $lr[$j] = -1;
                        }
                    }
                } else {
                    my @cell, $j;
                    @cell = split(/\s*\|\s*/, $l);
                    for ($j = 0; $j <= $#cell; $j++) {
                        $cell[$j] = &inner_context($cell[$j]);
                    }
                    $table[$c] = \@cell;
                    if ($max_column < $#cell + 1) {
                        $max_column = $#cell + 1;
                    }
                    for ($j = 0; $j <= $#cell; $j++) {
                        my $w = &width_str($cell[$j]);
                        if ($width[$j] < $w) {
                            $width[$j] = $w;
                        }
                    }
                    $c++;
                }

                $l = $line[++$i];
            } while ($i <= $#line && $l =~ /\|/);
            $i--;

            my $x, $y;
            for ($y = 0; $y < $c; $y++) {
                my $str = "";

                for ($x = 0; $x < $max_column; $x++) {
                    my $pad_l, $pad_r, $color;
                    my $width_cell;
                    if ($y <= $head) {
                        $color = "$COLOR_REVERSE$COLOR_BOLD";
                        $color .= &get_grey(($x % 2) * 2 + 20);
                    } else {
                        $color = &get_bcolor256(0, $y % 2 + 1, $x % 2);
                    }
                    $width_cell = &width_str($table[$y][$x]);
                    if ($lr[$x] == 1) {
                        $pad_l = " " x ($width[$x] - $width_cell);
                        $pad_r = "";
                    } elsif ($lr[$x] == -1) {
                        $pad_l = "";
                        $pad_r = " " x ($width[$x] - $width_cell);
                    } else {
                        $pad_l = " " x (($width[$x] - $width_cell) / 2);
                        $pad_r = " " x ($width[$x] - $width_cell - length($pad_l));
                    }
                    $str .= "$color$pad_l $table[$y][$x]$pad_r";
                }
                push @dest,  "$pad_s$str$COLOR_RESET";
            }
        } elsif ($l =~ /^\s*$/) {                              # empty line
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            push @dest, "";
            $f_cont = 0;
        } elsif ($l =~ /^\s*(#+)\s+([^\s].*)$/) {              # Header  #+
            my $level = length($1);
            my $t = $2;
            $t =~ s/#+\s*$//;
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            push @dest, &output_header($level, $width + $pad, $t);
        } elsif ($line[$i+1] =~/^\s*\=+\s*$/) {                # Header ==
            $l =~ /^(\s*)([^\s].*)$/;
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            push @dest, &output_header(1, $width + $pad, $l);
            $i++;
        } elsif ($line[$i+1] =~/^\s*-+\s*$/) {                 # Header --
            $l =~ /^(\s*)([^\s].*)$/;
            $Buffer && push @dest, &add_pad($pad, &buffer_flush());
            push @dest, &output_header(2, $width + $pad, $l);
            $i++;
        } else {                                               # content
            $l =~ s/^(\s*)//;
            &buffer_context($l);
            $f_cont = 1;
        }
    }
    $Buffer && push @dest, &add_pad($pad, &buffer_flush());

    return @dest;
}


sub add_pad {
    my $pad = shift @_;
    my  @dest = @_;
    my $i, $pad_s = " " x $pad;
    if (@dest) {
        for ($i = 0; $i <= $#dest; $i++) {
            $dest[$i] = $pad_s . $dest[$i];
        }
    }
    return @dest;
}

sub output_header {
    my ($l, $width, $text) = @_;

    $text = &inner_context($text);

    if ($l == 1) {
        my $bg = &get_bcolor256(1,1, 0);
        $text .= " " x ($width - &width_str($text));
        return  "$bg$COLOR_BOLD$text$COLOR_RESET";
    } elsif ($l == 2) {
        $text .= " " x ($width - &width_str($text));
        return "$COLOR_UNDERLINE$COLOR_BOLD$COLOR_FG_LYELLOW$text$COLOR_RESET";
    } elsif ($l == 3) {
        return "$COLOR_BOLD$COLOR_FG_LYELLOW$text$COLOR_RESET";
    }
    return "$COLOR_FG_LYELLOW$text$COLOR_RESET";
}

sub print_indent {
    my ($indent) = @_;
    if ($indent > 0) {
        print ("    " x $indent);
    }
}

sub change_tab {
    my ($text) = @_;
    my $count = 0, $pad, $ret = "";

    foreach $ch (split //, $text) {
        if ($ch eq "\t") {
            $pad = $TAB_WITDH - ($count % $TAB_WITDH);
            $ret .= " " x $pad;
        } else {
            $count++;
            $ret .= $ch;
        }
    }
    return $ret;
}

# use @CountIndent
sub indent_offset {
    my ($space, $is_list) = @_;
    my $count = 0, $ch, $ret;

    foreach $ch (split //, $space) {
        if ($ch eq " ") {
            $count += 1;
        } elsif ($ch eq "\t") {
            $count += 1;
            $count = ($count / $TAB_WITDH) * $TAB_WITDH + $TAB_WITDH;
        }
    }
    if ($is_list) {
        if (!@CountIndent) {
            $CountIndent[0] = $count;
            return 1;
        }
        $ret = $#CountIndent;
        while ($ret >= 0) {
            if ($CountIndent[$ret] < $count) {
                $CountIndent[$ret + 1] = $count;
                return $ret + 2;
            } elsif ($CountIndent[$ret] == $count) {
                return $ret + 1;
            }
            pop(@CountIndent);
            $ret--;
        }
    } else {
        if (!@CountIndent) {
            return 1;
        }
        $ret = $#CountIndent;
        while ($ret >= 0) {
            if ($CountIndent[$ret] < $count) {
                return $ret + 2;
            }
            pop(@CountIndent);
            $ret--;
        }
    }

    return 1;
}



sub output_code {
    my ($lines, $min_indent, $width, $lang) = @_;
    my $l, $pre_seq, @dest, $ext;

    if ($lang =~ /[cC]/) {
        $ext = ".c";
    } elsif ($lang =~ /perl/) {
        $ext = ".pl";
    } elsif ($lang =~ /ruby/) {
        $ext = ".rb";
    } elsif ($lang =~ /python/) {
        $ext = ".py";
    }
    if ($ext) {
        my ($tempfh, $tempfile) = tempfile(SUFFIX => $ext);
        binmode $tempfh, ":utf8";
        @dest = ();
        foreach $l (@$lines) {
            if (length($l) > $min_indent) {
                $l = substr($l, $min_indent);
            }
            $l .= " " x ($width - &width_str($l) - 4);
            print $tempfh "$l\n";
        }
        close $tempfh;
        @dest = `/usr/share/source-highlight/src-hilite-lesspipe.sh $tempfile`;
        chop(@dest);
        $pre_seq = &get_bgrey(3);
        for (my $i; $i < @dest; $i++) {
            my $ll = decode("utf8", $dest[$i]);
            $ll =~ s/\x1b\[m/\x1b\[m$pre_seq/g;
            $dest[$i] = "$pre_seq$ll$COLOR_RESET";
        }
    } else {
        @dest = ();
        foreach $l (@$lines) {
            if (length($l) > $min_indent) {
                $l = substr($l, $min_indent);
            }
            $pre_seq = &get_bgrey(6);
            $l .= " " x ($width - &width_str($l) - 4);
            push @dest, "$pre_seq$l$COLOR_RESET";
        }
    }

    return @dest;
}

sub buffer_context {
    my ($text) = @_;

    $Buffer .= "$text\n";
}

sub buffer_flush {
    my ($text) = $Buffer;
    my @dest = ();

    if (length($text) == 0) {
        return @dest;
    }

    # image link
    if (!$opt_iterm2 && ! $opt_sixel) {
        $text =~ s/\!\[(.*)\]\(([^\)]+)\)/[$COLOR_FG_GREEN$1$COLOR_RESET]/g;
    }

    # URL
    $text =~ s/\[(.*)\]\([^\]]*\)/$COLOR_FG_CYAN$COLOR_UNDERLINE$1$COLOR_RESET/g;
    $text =~ s/((http|https|ftp|file)\:[^\s]+)/$COLOR_FG_CYAN$COLOR_UNDERLINE$1$COLOR_RESET/g;

    # *text* **text**
    $text =~ s/\*\*([^\*]+)\*\*/${COLOR_BOLD}$1$COLOR_RESET/g;
    $text =~ s/\*([^\*]+)\*/${COLOR_FG_RED}$1$COLOR_RESET/g;

    # code
    my $back_grey = &get_bgrey(6);
    $text =~ s/`(`*[^`]+`*)`/$back_grey$1$COLOR_RESET/g;

    # <br>
    $text =~ s/<[bB][rR]>//g;

    my $pre_seq = "";
    my $post_seq = "";
    my $next_seq = "";
    foreach $line (split /\n/, $text) {
        $pre_seq = $next_seq;
        if ($line =~ /(\x1b\[[^m]+m)[^\x1b]*$/) {
            $next_seq = $1;
            if ($next_seq eq $COLOR_RESET) {
                $next_seq = "";
                $post_seq = "";
            } else {
                $post_seq = "$COLOR_RESET";
            }
        } elsif (length($next_seq) > 0) {
            $post_seq = "$COLOR_RESET";
        }

        push @dest, "$pre_seq$line$post_seq";
    }
    $Buffer = "";

    return @dest;
}

sub inner_context {
    my ($text) = @_;

    # image link
    $text =~ s/\!\[(.*)\]\(([^\)]+)\)/[$1]/g;

    # URL
    $text =~ s/\[(.*)\]\([^\]]*\)/$1/g;

    # *text* **text**
    $text =~ s/\*\*([^\*]+)\*\*/$1/g;
    $text =~ s/\*([^\*]+)\*/$1/g;

    # code
    $text =~ s/`(`*[^`]+`*)`/$1/g;

    # <br>
    $text =~ s/<[bB][rR]>//g;

    return $text;
}

# 256 color r,g,b [0-5]
sub get_color256 {
    my ($r, $g, $b) = @_;
    my $c = 16 + 36 * $r+ 6 * $g + $b;

    return "\033[38;5;${c}m";
}

# 256 color r,g,b [0-5] backgound
sub get_bcolor256 {
    my ($r, $g, $b) = @_;
    my $c = 16 + 36 * $r+ 6 * $g + $b;

    return "\033[48;5;${c}m";
}

# 256 color gley scale [0-23]
sub get_grey {
    my ($l) = @_;
    my $c = 232 + $l;

    return "\033[38;5;${c}m";
}

# 256 color gley scale [0-23] background
sub get_bgrey {
    my ($l) = @_;
    my $c = 232 + $l;

    return "\033[48;5;${c}m";
}

# get string width in console
sub width_str {
    my ($str) = @_;
    if ($use_TextVisualWidthPP)  {
        return Text::VisualWidth::PP::width($str);
    } else {
        # TODO: not support all code in unicode
        # now checking below
        #
        #    ASCII [\x20-\x7E]   1
        #    hankaku kana(japan) 1  (?:\xEF\xBD[\xA1-\xBF]|\xEF\xBE[\x80-\x9F])
        #    latin?(utf8 2byte)  1  (?:[\xC2-\xDF][\x80-\xBF])
        #    other               2
        my $c, $u, $w = 0;

        $c = $str;
        foreach $c (split //, $str) {
            $u = encode_utf8($c);
            if ( $u !~ /(?:\xEF\xBD[\xA1-\xBF]|\xEF\xBE[\x80-\x9F])|(?:[\xC2-\xDF][\x80-\xBF])|[\x20-\x7E]/ ) {
                $w += 2;
            } else {
                $w += 1;
            }
        }
        return $w;
    }
}
